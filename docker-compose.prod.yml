version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    restart: unless-stopped

  minio:
    image: minio/minio:RELEASE.2023-05-04T21-44-30Z
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    restart: unless-stopped

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api_gateway:
    build: ./api_gateway
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MINIO_URL=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      kafka:
        condition: service_started
      minio:
        condition: service_started
      postgres:
        condition: service_healthy

  stt_worker_base:
    build: ./stt_worker_base
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MINIO_URL=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    depends_on:
      - kafka
      - minio

  stt_worker_fast:
    build: ./stt_worker_fast
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MINIO_URL=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    depends_on:
      - kafka
      - minio

  stt_worker_large:
    build: ./stt_worker_large
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MINIO_URL=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    depends_on:
      - kafka
      - minio

  stt_worker_whisperx:
    build: ./stt_worker_whisperx
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MINIO_URL=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
    depends_on:
      - kafka
      - minio

  result_handler:
    build: ./result_handler
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - WEBSOCKET_URL=ws://api_gateway:8000/ws/notify
    depends_on:
      - kafka
      - postgres
      - api_gateway

  admin_ui:
    build: ./admin_ui
    restart: unless-stopped

  # --- Monitoring Stack ---
  prometheus:
    image: prom/prometheus:v2.45.0
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - kafka-exporter
      - postgres-exporter

  grafana:
    image: grafana/grafana:9.5.3
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - prometheus

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.6.0
    ports:
      - "9308:9308"
    command: --kafka.server=kafka:29092
    restart: unless-stopped
    depends_on:
      - kafka

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.12.0
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    restart: unless-stopped
    depends_on:
      - postgres

  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api_gateway
      - admin_ui
    restart: unless-stopped

volumes:
  minio_data:
  postgres_data:
  prometheus_data:
  grafana_data:
