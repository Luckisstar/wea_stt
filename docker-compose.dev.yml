services:
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   restart: always

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_BROKER_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'                         # ⬅️ 리스너 설정 (브로커, 컨트롤러)
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092'                       # ⬅️ 외부에 알릴 리스너 주소
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: 0ozUGsX6TZKO9JQYNeyc8w
    volumes:
      - ./data/kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy # ⬅️ Zookeeper 대신 Kafka의 healthcheck를 기다림
    env_file: .env
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo 'Waiting for Kafka to be ready...'
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics...'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic $$KAFKA_AUDIO_REQUESTS_TOPIC --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic $$KAFKA_STT_RESULTS_TOPIC --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic $$KAFKA_NOTIFICATION_TOPIC --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file: .env
    command: server /data --console-address ":9001"
    volumes:
      - "./data/minio_data:/data"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always


  # Nginx (리버스 프록시)
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - admin_ui_build:/usr/share/nginx/html/admin_ui # Mount admin_ui build output
    depends_on:
      - api_gateway
      - admin_ui # Ensure admin_ui builds before nginx starts
    restart: always

  admin_ui:
    build:
      context: ./admin_ui
      dockerfile: Dockerfile
    volumes:
      - admin_ui_build:/app/build
    command: npm run build


  api_gateway:
    build: ./api_gateway
    ports: ["8000:8000"]
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_started
      postgres:
        condition: service_started
    volumes: ["./api_gateway:/app"]
    restart: always

  stt_worker_base:
    build:
      context: ./stt_worker/stt_worker_base
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - KAFKA_TARGET_TOPIC=stt_requests_base
      - MODEL_NAME=base
      - MODEL_PATH=${MODEL_PATH}
      - DEVICE=${DEVICE} # .env 파일의 변수를 컨테이너로 전달
    volumes:
      - ./models/base:/app/models
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1 # 사용할 GPU 개수
    #           capabilities: [gpu]
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
      api_gateway:
        condition: service_started
    restart: always

   # stt_worker_whisperx:
  #   build:
  #     context: .
  #     dockerfile: ./stt_worker/stt_worker_whisperx/Dockerfile
  #    deploy: # GPU 할당
  #      resources:
  #        reservations:
  #          devices: [{driver: nvidia, count: 1, capabilities: [gpu]}]
  #   volumes: ["./stt_worker/stt_worker_whisperx:/app"]
  #   environment:
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
  #     - KAFKA_TARGET_TOPIC=stt_requests_whisperx
  #     - MODEL_NAME=large-v3
  #     - MINIO_URL=minio:9000
  #     - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
  #     - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
  #     - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
  #   depends_on: [kafka, minio]
  
  result_handler:
    build: ./result_handler
    env_file: .env
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      api_gateway:
        condition: service_started
    restart: always


  postgres:
    image: postgres:15
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  # --- 모니터링 스택 ---
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
    command: --config.file=/etc/prometheus/prometheus.yml
    restart: always

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.6.0
    ports: ["9308:9308"]
    command: --kafka.server=kafka:29092
    depends_on: [kafka]
    
  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.12.0
    ports: ["9187:9187"]
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    depends_on: [postgres]

volumes:
  minio_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  admin_ui_build:
